{% extends "base.html.jinja" %}
{% block title %}Edit item{% endblock %}

{% block head %}
    {{ super() }}
    <script>

        pages = [];
        pageIndex = 0;

        currentDocumentPath = null;
        currentKey = null;

        windowWidth = null;
        windowHeight = null;

        function loadUnit()
        {
            const currentUrl = new URL(window.location.href);
            currentDocumentPath = currentUrl.searchParams.get("document_path");
            currentKey = currentUrl.searchParams.get("key");

            document.title = "Edit item - " + currentKey + " - LOH2 trans";
            document.getElementById("header_text").innerText = "Edit item - " + currentKey;
            document.getElementById("back_link").href = "/document?document_path=" + currentDocumentPath;

            const apiUrl = "/api/get_unit_info?document_path=" + currentDocumentPath + "&key=" + currentKey;

            fetch(apiUrl)
                .then(response => response.ok ? response.json() : Promise.reject(response))
                .then(json => {
                    windowWidth = json['window_width'];
                    windowHeight = json['window_height'];

                    document.getElementById("original_text").value = json['original'];
                    document.getElementById("translated_text").value = json['translation'];

                    if ('prev_key' in json)
                    {
                        document.getElementById("prev_key_link").href = "/unit?document_path=" + currentDocumentPath + "&key=" + json['prev_key'];
                        document.getElementById("prev_key_link").innerText = json['prev_key'];
                    }

                    if ('next_key' in json)
                    {
                        document.getElementById("next_key_link").href = "/unit?document_path=" + currentDocumentPath + "&key=" + json['next_key'];
                        document.getElementById("next_key_link").innerText = json['next_key'];
                    }


                    var conditionsRoot = document.getElementById("condition_list");
                    var conditionTemplate = document.getElementById("condition_list_item_template");

                    for (var condition of json['condition_list'])
                    {
                        var conditionItem = conditionTemplate.content.cloneNode(true);
                        conditionItem.firstElementChild.dataset.condition = condition;
                        conditionItem.querySelector("label").innerText = condition;

                        conditionsRoot.appendChild(conditionItem);
                    }

                    updateText();
                })
                .catch(response => window.alert("API call failed: " + response.status + " " + response.statusText));
        }

        function setPreviewSize(columns, rows, translated)
        {
            var textMeasurement = document.getElementById('text_measurement');
            var previewText = document.getElementById('preview_text');

            var charWidth = textMeasurement.offsetWidth / 10.0;
            var charHeight = textMeasurement.offsetHeight / 10.0;

            textMeasurement.style.display = "inline-block";
            if (true == translated)
            {
                textMeasurement.innerHTML = "WWWWWWWWWW<br/>WWWWWWWWWW<br/>WWWWWWWWWW<br/>WWWWWWWWWW<br/>WWWWWWWWWW";

                var charWidth = textMeasurement.offsetWidth / 10.0;
                var charHeight = textMeasurement.offsetHeight / 5.0;
                previewText.style.width = (charWidth * columns).toString() + "px";
                previewText.style.height = (charHeight * rows).toString() + "px";
            }
            else
            {
                textMeasurement.innerHTML = "ーーーーー<br/>ーーーーー<br/>ーーーーー<br/>ーーーーー<br/>ーーーーー";

                var charWidth = textMeasurement.offsetWidth / 5.0;
                var charHeight = textMeasurement.offsetHeight / 5.0;
                previewText.style.width = (charWidth * columns / 2).toString() + "px";
                previewText.style.height = (charHeight * rows).toString() + "px";
            }

            textMeasurement.style.display = "none";
        }

        function updateText()
        {
            const apiUrl = "/api/render_unit_text";

            formData = new FormData();

            formData.append("document_path", currentDocumentPath);
            formData.append("key", currentKey);

            var showOriginal = document.getElementById('show_original')
            var translated = showOriginal == undefined || !showOriginal.checked
            formData.append("which_text", translated ? "translation" : "original");

            var conditions = [];
            for (var toggle of document.getElementsByClassName('condition_toggle'))
            {
                if (toggle.checked)
                {
                    conditions.push(toggle.parentElement.dataset.condition);
                }
            }
            formData.append("active_conditions", JSON.stringify(conditions));

            fetch(apiUrl, { method: 'POST', body: formData })
                .then(response => response.ok ? response.json() : Promise.reject(response))
                .then(json => {
                    var conditionsChecked = json['conditions_checked']

                    pages = json['pages'];
                    document.getElementById('max_page_number').innerHTML = pages.length;
                    setPage(pageIndex);

                    for (var toggle of document.getElementsByClassName('condition_toggle'))
                    {
                        if (conditionsChecked.includes(toggle.parentElement.dataset.condition))
                        {
                            toggle.classList.add("condition_toggle_waschecked");
                        }
                        else
                        {
                            toggle.classList.remove("condition_toggle_waschecked");
                        }
                    }

                    setPreviewSize(windowWidth, windowHeight, translated);
                })
                .catch(response => window.alert("API call failed: " + response.status + " " + response.statusText));
        }

        function prevPage()
        {
            var potentialPrevPage = pageIndex - 1;
            if (potentialPrevPage >= 0)
            {
                setPage(potentialPrevPage);
            }
        }

        function nextPage()
        {
            var potentialNextPage = pageIndex + 1;
            if (potentialNextPage < pages.length)
            {
                setPage(potentialNextPage);
            }
        }

        function setPage(newPageIndex)
        {
            if (pages.length == 0)
            {
                document.getElementById('preview_text').innerHTML = "";
                document.getElementById('current_page_number').innerHTML = 0;
            }
            else
            {
                pageIndex = newPageIndex;

                if (pageIndex < 0)
                {
                    pageIndex = 0;
                }
                else if (pageIndex >= pages.length)
                {
                    pageIndex = pages.length - 1;
                }

                var text = pages[pageIndex].replace(/\r?\n/g, '\r\n');
                document.getElementById('preview_text').innerHTML = text;
                document.getElementById('current_page_number').innerHTML = pageIndex + 1;
            }

            document.getElementById('prev_page').disabled = (pageIndex <= 0);
            document.getElementById('next_page').disabled = (pageIndex >= pages.length - 1);
        }

        function handleTranslationChanged()
        {
            const apiUrl = "/api/update_unit_text";

            formData = new FormData();
            formData.append("document_path", currentDocumentPath);
            formData.append("key", currentKey);

            var newText = document.getElementById('translated_text').value;

            formData.append("new_text", newText);

            fetch(apiUrl, { method: 'POST', body: formData })
                .then(response => updateText());
        }

        function findSimilar()
        {
            const apiUrl = "/api/find_similar_units";

            var resultsRoot = document.getElementById('find_similar_results');
            resultsRoot.replaceChildren();

            formData = new FormData();
            formData.append("document_path", currentDocumentPath);
            formData.append("key", currentKey);

            fetch(apiUrl, { method: 'POST', body: formData })
                .then(response => response.ok ? response.json() : Promise.reject(response))
                .then(json => {
                    var resultsRoot = document.getElementById('find_similar_results');
                    var resultTemplate = document.getElementById("find_similar_item_template")

                    for (var result of json)
                    {
                        var resultItem = resultTemplate.content.cloneNode(true);
                        resultItem.querySelector(".find_similar_result_original").innerText = result['original']
                        resultItem.querySelector(".find_similar_result_translated").innerText = result['translated']

                        var resultLink = resultItem.querySelector(".find_similar_result_link");
                        resultLink.innerText = result['document_path'] + "/" + result['key']
                        resultLink.href = "/unit?document_path=" + result['document_path']
                            + "&key=" + result['key'];

                        resultsRoot.appendChild(resultItem);
                    }

                })
                .catch(response => window.alert("API call failed: " + response.status + " " + response.statusText));
        }

        function useSimilarResult(clickedButton)
        {
            var resultItem = clickedButton.parentElement;
            var textToUse = resultItem.querySelector(".find_similar_result_translated").innerText;

            document.getElementById('translated_text').value = textToUse;

            handleTranslationChanged();
        }
    </script>
{% endblock %}

{% block header %}
    <h1 id="header_text">Edit item - </h1>
{% endblock %}

{% block header_left %}
    <a id="prev_key_link"></a>
{% endblock %}

{% block header_right %}
    <a id="next_key_link"></a>
{% endblock %}

{% block onload %} loadUnit(); {% endblock %}

{% block content %}

    <p id="text_measurement"/>

    <div id="preview_panel">
        <p id="page_number">Page <span id="current_page_number">0</span> of <span id="max_page_number">0</span></p>
        <p id="preview_text"></p>
        <div id="page_controls">
            <button id="prev_page" onclick="prevPage();">Prev</button>
            <button id="next_page" onclick="nextPage();">Next</button>
        </div>

        <div id="preview_text_selection">
            <input type="radio" id="show_original" name="which_text" value="original" onclick="updateText();"/>
            <label for="show_original">Original</label>
            <input type="radio" id="show_translated" name="which_text" value="translated" onclick="updateText();" checked/>
            <label for="show_translated">Translated</label>
        </div>

        <ul id="condition_list">
        </ul>
        <template id="condition_list_item_template">
            <li class="condition_item">
                <input type="checkbox" class="condition_toggle" onclick="updateText();"/>
                <label></label>
            </li>
        </template>

    </div>

    <div id="text_entry_panel">
        <textarea id="original_text" rows="15" onscroll="document.getElementById('translated_text').scrollTop = document.getElementById('original_text').scrollTop;" readonly></textarea>
        <textarea id="translated_text" rows="15" onscroll="document.getElementById('original_text').scrollTop = document.getElementById('translated_text').scrollTop;" onchange="handleTranslationChanged();"></textarea>
    </div>

    <div>
        <button onclick="findSimilar();">Find similar</button>
        <ul id="find_similar_results"></ul>
        <template id="find_similar_item_template">
            <li class="find_similar_result">
                <p><a class="find_similar_result_link"></a></p>
                <p class="find_similar_result_original"></p>
                <p class="find_similar_result_translated"></p>
                <button class="find_similar_result_use_button" onclick="useSimilarResult(this);">Use</button>
            </li>
        </template>
    </div>

    <p><a id="back_link">Back</a></p>

{% endblock %}